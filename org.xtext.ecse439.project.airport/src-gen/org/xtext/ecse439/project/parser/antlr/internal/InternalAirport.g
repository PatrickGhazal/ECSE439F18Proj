/*
 * generated by Xtext 2.10.0
 */
grammar InternalAirport;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.ecse439.project.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ecse439.project.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ecse439.project.services.AirportGrammarAccess;

}

@parser::members {

 	private AirportGrammarAccess grammarAccess;

    public InternalAirportParser(TokenStream input, AirportGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected AirportGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsAirportParserRuleCall_0());
			}
			lv_elements_0_0=ruleAirport
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.ecse439.project.Airport.Airport");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAirport
entryRuleAirport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAirportRule()); }
	iv_ruleAirport=ruleAirport
	{ $current=$iv_ruleAirport.current; }
	EOF;

// Rule Airport
ruleAirport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Airport'
		{
			newLeafNode(otherlv_0, grammarAccess.getAirportAccess().getAirportKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAirportAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAirportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAirportAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAirportAccess().getScheduleScheduleParserRuleCall_3_0());
				}
				lv_schedule_3_0=ruleSchedule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAirportRule());
					}
					set(
						$current,
						"schedule",
						lv_schedule_3_0,
						"org.xtext.ecse439.project.Airport.Schedule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAirportAccess().getAllRunAllRunwaysParserRuleCall_4_0());
				}
				lv_allRun_4_0=ruleAllRunways
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAirportRule());
					}
					set(
						$current,
						"allRun",
						lv_allRun_4_0,
						"org.xtext.ecse439.project.Airport.AllRunways");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAirportAccess().getAllGatAllGatesParserRuleCall_5_0());
				}
				lv_allGat_5_0=ruleAllGates
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAirportRule());
					}
					set(
						$current,
						"allGat",
						lv_allGat_5_0,
						"org.xtext.ecse439.project.Airport.AllGates");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAirportAccess().getAllAirAllAirlinesParserRuleCall_6_0());
				}
				lv_allAir_6_0=ruleAllAirlines
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAirportRule());
					}
					set(
						$current,
						"allAir",
						lv_allAir_6_0,
						"org.xtext.ecse439.project.Airport.AllAirlines");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAirportAccess().getAllFliAllFlightsParserRuleCall_7_0());
				}
				lv_allFli_7_0=ruleAllFlights
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAirportRule());
					}
					set(
						$current,
						"allFli",
						lv_allFli_7_0,
						"org.xtext.ecse439.project.Airport.AllFlights");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAirportAccess().getAllTerAllTerminalsParserRuleCall_8_0());
				}
				lv_allTer_8_0=ruleAllTerminals
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAirportRule());
					}
					set(
						$current,
						"allTer",
						lv_allTer_8_0,
						"org.xtext.ecse439.project.Airport.AllTerminals");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getAirportAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleAllTerminals
entryRuleAllTerminals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllTerminalsRule()); }
	iv_ruleAllTerminals=ruleAllTerminals
	{ $current=$iv_ruleAllTerminals.current; }
	EOF;

// Rule AllTerminals
ruleAllTerminals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Terminals'
		{
			newLeafNode(otherlv_0, grammarAccess.getAllTerminalsAccess().getTerminalsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllTerminalsAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAllTerminalsAccess().getTerminalsTerminalParserRuleCall_2_0());
				}
				lv_terminals_2_0=ruleTerminal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAllTerminalsRule());
					}
					add(
						$current,
						"terminals",
						lv_terminals_2_0,
						"org.xtext.ecse439.project.Airport.Terminal");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getAllTerminalsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAllRunways
entryRuleAllRunways returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllRunwaysRule()); }
	iv_ruleAllRunways=ruleAllRunways
	{ $current=$iv_ruleAllRunways.current; }
	EOF;

// Rule AllRunways
ruleAllRunways returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Runways'
		{
			newLeafNode(otherlv_0, grammarAccess.getAllRunwaysAccess().getRunwaysKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllRunwaysAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAllRunwaysAccess().getRunwaysRunwayParserRuleCall_2_0());
				}
				lv_runways_2_0=ruleRunway
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAllRunwaysRule());
					}
					add(
						$current,
						"runways",
						lv_runways_2_0,
						"org.xtext.ecse439.project.Airport.Runway");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getAllRunwaysAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAllGates
entryRuleAllGates returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllGatesRule()); }
	iv_ruleAllGates=ruleAllGates
	{ $current=$iv_ruleAllGates.current; }
	EOF;

// Rule AllGates
ruleAllGates returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Gates'
		{
			newLeafNode(otherlv_0, grammarAccess.getAllGatesAccess().getGatesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllGatesAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAllGatesAccess().getGatesGateParserRuleCall_2_0());
				}
				lv_gates_2_0=ruleGate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAllGatesRule());
					}
					add(
						$current,
						"gates",
						lv_gates_2_0,
						"org.xtext.ecse439.project.Airport.Gate");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getAllGatesAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAllAirlines
entryRuleAllAirlines returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllAirlinesRule()); }
	iv_ruleAllAirlines=ruleAllAirlines
	{ $current=$iv_ruleAllAirlines.current; }
	EOF;

// Rule AllAirlines
ruleAllAirlines returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Airlines'
		{
			newLeafNode(otherlv_0, grammarAccess.getAllAirlinesAccess().getAirlinesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllAirlinesAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAllAirlinesAccess().getAirlineAirlineParserRuleCall_2_0());
				}
				lv_airline_2_0=ruleAirline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAllAirlinesRule());
					}
					add(
						$current,
						"airline",
						lv_airline_2_0,
						"org.xtext.ecse439.project.Airport.Airline");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getAllAirlinesAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAllFlights
entryRuleAllFlights returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllFlightsRule()); }
	iv_ruleAllFlights=ruleAllFlights
	{ $current=$iv_ruleAllFlights.current; }
	EOF;

// Rule AllFlights
ruleAllFlights returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Flights'
		{
			newLeafNode(otherlv_0, grammarAccess.getAllFlightsAccess().getFlightsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllFlightsAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAllFlightsAccess().getFlightsFlightParserRuleCall_2_0());
				}
				lv_flights_2_0=ruleFlight
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAllFlightsRule());
					}
					add(
						$current,
						"flights",
						lv_flights_2_0,
						"org.xtext.ecse439.project.Airport.Flight");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getAllFlightsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleSchedule
entryRuleSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScheduleRule()); }
	iv_ruleSchedule=ruleSchedule
	{ $current=$iv_ruleSchedule.current; }
	EOF;

// Rule Schedule
ruleSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getScheduleAccess().getScheduleAction_0(),
					$current);
			}
		)
		otherlv_1='Schedule'
		{
			newLeafNode(otherlv_1, grammarAccess.getScheduleAccess().getScheduleKeyword_1());
		}
		otherlv_2='for'
		{
			newLeafNode(otherlv_2, grammarAccess.getScheduleAccess().getForKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleAccess().getDateDateParserRuleCall_3_0());
				}
				lv_date_3_0=ruleDate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleRule());
					}
					set(
						$current,
						"date",
						lv_date_3_0,
						"org.xtext.ecse439.project.Airport.Date");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getScheduleAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleAccess().getFlGateFlGateParserRuleCall_5_0());
				}
				lv_flGate_5_0=ruleFlGate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleRule());
					}
					add(
						$current,
						"flGate",
						lv_flGate_5_0,
						"org.xtext.ecse439.project.Airport.FlGate");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getScheduleAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleFlight
entryRuleFlight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlightRule()); }
	iv_ruleFlight=ruleFlight
	{ $current=$iv_ruleFlight.current; }
	EOF;

// Rule Flight
ruleFlight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFlightAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlightRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getFlightAccess().getCommaKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFlightAccess().getTimeTimeParserRuleCall_2_0());
				}
				lv_time_2_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFlightRule());
					}
					set(
						$current,
						"time",
						lv_time_2_0,
						"org.xtext.ecse439.project.Airport.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getFlightAccess().getCommaKeyword_3());
		}
		otherlv_4='Plane'
		{
			newLeafNode(otherlv_4, grammarAccess.getFlightAccess().getPlaneKeyword_4());
		}
		otherlv_5='size'
		{
			newLeafNode(otherlv_5, grammarAccess.getFlightAccess().getSizeKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getFlightAccess().getColonKeyword_6());
		}
		(
			(
				lv_airplaneSize_7_0=RULE_INT
				{
					newLeafNode(lv_airplaneSize_7_0, grammarAccess.getFlightAccess().getAirplaneSizeINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlightRule());
					}
					setWithLastConsumed(
						$current,
						"airplaneSize",
						lv_airplaneSize_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getFlightAccess().getCommaKeyword_8());
		}
		otherlv_9='Needed'
		{
			newLeafNode(otherlv_9, grammarAccess.getFlightAccess().getNeededKeyword_9());
		}
		otherlv_10='runway'
		{
			newLeafNode(otherlv_10, grammarAccess.getFlightAccess().getRunwayKeyword_10());
		}
		otherlv_11='length'
		{
			newLeafNode(otherlv_11, grammarAccess.getFlightAccess().getLengthKeyword_11());
		}
		otherlv_12=':'
		{
			newLeafNode(otherlv_12, grammarAccess.getFlightAccess().getColonKeyword_12());
		}
		(
			(
				lv_reqRunwayLg_13_0=RULE_INT
				{
					newLeafNode(lv_reqRunwayLg_13_0, grammarAccess.getFlightAccess().getReqRunwayLgINTTerminalRuleCall_13_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlightRule());
					}
					setWithLastConsumed(
						$current,
						"reqRunwayLg",
						lv_reqRunwayLg_13_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleFlGate
entryRuleFlGate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlGateRule()); }
	iv_ruleFlGate=ruleFlGate
	{ $current=$iv_ruleFlGate.current; }
	EOF;

// Rule FlGate
ruleFlGate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Flight'
		{
			newLeafNode(otherlv_0, grammarAccess.getFlGateAccess().getFlightKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlGateRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFlGateAccess().getFlightFlightCrossReference_1_0());
				}
			)
		)
		this_GATE_MESSAGE_2=RULE_GATE_MESSAGE
		{
			newLeafNode(this_GATE_MESSAGE_2, grammarAccess.getFlGateAccess().getGATE_MESSAGETerminalRuleCall_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlGateRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getFlGateAccess().getGateGateCrossReference_3_0());
				}
			)
		)
		otherlv_4='at'
		{
			newLeafNode(otherlv_4, grammarAccess.getFlGateAccess().getAtKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFlGateAccess().getTimeTimeParserRuleCall_5_0());
				}
				lv_time_5_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFlGateRule());
					}
					set(
						$current,
						"time",
						lv_time_5_0,
						"org.xtext.ecse439.project.Airport.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getFlGateAccess().getFullStopKeyword_6());
		}
	)
;

// Entry rule entryRuleTerminal
entryRuleTerminal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalRule()); }
	iv_ruleTerminal=ruleTerminal
	{ $current=$iv_ruleTerminal.current; }
	EOF;

// Rule Terminal
ruleTerminal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTerminalAccess().getTerminalAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTerminalAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTerminalAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminalRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getTerminalAccess().getRunwayRunwayCrossReference_3_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminalRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getTerminalAccess().getGatesGateCrossReference_4_0());
				}
			)
		)*
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminalRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getTerminalAccess().getAirlineAirlineCrossReference_5_0());
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTerminalAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleRunway
entryRuleRunway returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunwayRule()); }
	iv_ruleRunway=ruleRunway
	{ $current=$iv_ruleRunway.current; }
	EOF;

// Rule Runway
ruleRunway returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRunwayAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRunwayRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getRunwayAccess().getFullStopKeyword_1());
		}
		otherlv_2='Length'
		{
			newLeafNode(otherlv_2, grammarAccess.getRunwayAccess().getLengthKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getRunwayAccess().getColonKeyword_3());
		}
		(
			(
				lv_length_4_0=RULE_INT
				{
					newLeafNode(lv_length_4_0, grammarAccess.getRunwayAccess().getLengthINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRunwayRule());
					}
					setWithLastConsumed(
						$current,
						"length",
						lv_length_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='.'
		{
			newLeafNode(otherlv_5, grammarAccess.getRunwayAccess().getFullStopKeyword_5());
		}
		otherlv_6='In'
		{
			newLeafNode(otherlv_6, grammarAccess.getRunwayAccess().getInKeyword_6());
		}
		otherlv_7='use'
		{
			newLeafNode(otherlv_7, grammarAccess.getRunwayAccess().getUseKeyword_7());
		}
		otherlv_8=':'
		{
			newLeafNode(otherlv_8, grammarAccess.getRunwayAccess().getColonKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRunwayAccess().getUsedBooleanParserRuleCall_9_0());
				}
				lv_used_9_0=ruleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRunwayRule());
					}
					set(
						$current,
						"used",
						lv_used_9_0,
						"org.xtext.ecse439.project.Airport.Boolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGate
entryRuleGate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGateRule()); }
	iv_ruleGate=ruleGate
	{ $current=$iv_ruleGate.current; }
	EOF;

// Rule Gate
ruleGate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getGateAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getGateAccess().getFullStopKeyword_1());
		}
		otherlv_2='Max'
		{
			newLeafNode(otherlv_2, grammarAccess.getGateAccess().getMaxKeyword_2());
		}
		otherlv_3='airplane'
		{
			newLeafNode(otherlv_3, grammarAccess.getGateAccess().getAirplaneKeyword_3());
		}
		otherlv_4='size'
		{
			newLeafNode(otherlv_4, grammarAccess.getGateAccess().getSizeKeyword_4());
		}
		otherlv_5='allowed'
		{
			newLeafNode(otherlv_5, grammarAccess.getGateAccess().getAllowedKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getGateAccess().getColonKeyword_6());
		}
		(
			(
				lv_maxApSize_7_0=RULE_INT
				{
					newLeafNode(lv_maxApSize_7_0, grammarAccess.getGateAccess().getMaxApSizeINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGateRule());
					}
					setWithLastConsumed(
						$current,
						"maxApSize",
						lv_maxApSize_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleAirline
entryRuleAirline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAirlineRule()); }
	iv_ruleAirline=ruleAirline
	{ $current=$iv_ruleAirline.current; }
	EOF;

// Rule Airline
ruleAirline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAirlineAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAirlineRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleDate
entryRuleDate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	iv_ruleDate=ruleDate
	{ $current=$iv_ruleDate.current; }
	EOF;

// Rule Date
ruleDate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_day_0_0=RULE_INT
				{
					newLeafNode(lv_day_0_0, grammarAccess.getDateAccess().getDayINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDateRule());
					}
					setWithLastConsumed(
						$current,
						"day",
						lv_day_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getDateAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				lv_month_2_0=RULE_ID
				{
					newLeafNode(lv_month_2_0, grammarAccess.getDateAccess().getMonthIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDateRule());
					}
					setWithLastConsumed(
						$current,
						"month",
						lv_month_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='-'
		{
			newLeafNode(otherlv_3, grammarAccess.getDateAccess().getHyphenMinusKeyword_3());
		}
		(
			(
				lv_year_4_0=RULE_INT
				{
					newLeafNode(lv_year_4_0, grammarAccess.getDateAccess().getYearINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDateRule());
					}
					setWithLastConsumed(
						$current,
						"year",
						lv_year_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_hour_0_0=RULE_INT
				{
					newLeafNode(lv_hour_0_0, grammarAccess.getTimeAccess().getHourINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeRule());
					}
					setWithLastConsumed(
						$current,
						"hour",
						lv_hour_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeAccess().getColonKeyword_1());
		}
		(
			(
				lv_minute_2_0=RULE_INT
				{
					newLeafNode(lv_minute_2_0, grammarAccess.getTimeAccess().getMinuteINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeRule());
					}
					setWithLastConsumed(
						$current,
						"minute",
						lv_minute_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current.getText(); }
	EOF;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1());
		}
	)
;

RULE_GATE_MESSAGE : (' is arriving at '|' is departing from ');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
