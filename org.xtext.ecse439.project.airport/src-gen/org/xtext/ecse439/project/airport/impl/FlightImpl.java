/**
 * generated by Xtext 2.10.0
 */
package org.xtext.ecse439.project.airport.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.ecse439.project.airport.AirportPackage;
import org.xtext.ecse439.project.airport.Flight;
import org.xtext.ecse439.project.airport.Time;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Flight</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.FlightImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.FlightImpl#getTime <em>Time</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.FlightImpl#getAirplaneSize <em>Airplane Size</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.FlightImpl#getReqRunwayLg <em>Req Runway Lg</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FlightImpl extends MinimalEObjectImpl.Container implements Flight
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected Time time;

  /**
   * The default value of the '{@link #getAirplaneSize() <em>Airplane Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAirplaneSize()
   * @generated
   * @ordered
   */
  protected static final int AIRPLANE_SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getAirplaneSize() <em>Airplane Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAirplaneSize()
   * @generated
   * @ordered
   */
  protected int airplaneSize = AIRPLANE_SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #getReqRunwayLg() <em>Req Runway Lg</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReqRunwayLg()
   * @generated
   * @ordered
   */
  protected static final int REQ_RUNWAY_LG_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getReqRunwayLg() <em>Req Runway Lg</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReqRunwayLg()
   * @generated
   * @ordered
   */
  protected int reqRunwayLg = REQ_RUNWAY_LG_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FlightImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AirportPackage.Literals.FLIGHT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.FLIGHT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Time getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTime(Time newTime, NotificationChain msgs)
  {
    Time oldTime = time;
    time = newTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirportPackage.FLIGHT__TIME, oldTime, newTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTime(Time newTime)
  {
    if (newTime != time)
    {
      NotificationChain msgs = null;
      if (time != null)
        msgs = ((InternalEObject)time).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirportPackage.FLIGHT__TIME, null, msgs);
      if (newTime != null)
        msgs = ((InternalEObject)newTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirportPackage.FLIGHT__TIME, null, msgs);
      msgs = basicSetTime(newTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.FLIGHT__TIME, newTime, newTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getAirplaneSize()
  {
    return airplaneSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAirplaneSize(int newAirplaneSize)
  {
    int oldAirplaneSize = airplaneSize;
    airplaneSize = newAirplaneSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.FLIGHT__AIRPLANE_SIZE, oldAirplaneSize, airplaneSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getReqRunwayLg()
  {
    return reqRunwayLg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReqRunwayLg(int newReqRunwayLg)
  {
    int oldReqRunwayLg = reqRunwayLg;
    reqRunwayLg = newReqRunwayLg;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.FLIGHT__REQ_RUNWAY_LG, oldReqRunwayLg, reqRunwayLg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AirportPackage.FLIGHT__TIME:
        return basicSetTime(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AirportPackage.FLIGHT__NAME:
        return getName();
      case AirportPackage.FLIGHT__TIME:
        return getTime();
      case AirportPackage.FLIGHT__AIRPLANE_SIZE:
        return getAirplaneSize();
      case AirportPackage.FLIGHT__REQ_RUNWAY_LG:
        return getReqRunwayLg();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AirportPackage.FLIGHT__NAME:
        setName((String)newValue);
        return;
      case AirportPackage.FLIGHT__TIME:
        setTime((Time)newValue);
        return;
      case AirportPackage.FLIGHT__AIRPLANE_SIZE:
        setAirplaneSize((Integer)newValue);
        return;
      case AirportPackage.FLIGHT__REQ_RUNWAY_LG:
        setReqRunwayLg((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AirportPackage.FLIGHT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AirportPackage.FLIGHT__TIME:
        setTime((Time)null);
        return;
      case AirportPackage.FLIGHT__AIRPLANE_SIZE:
        setAirplaneSize(AIRPLANE_SIZE_EDEFAULT);
        return;
      case AirportPackage.FLIGHT__REQ_RUNWAY_LG:
        setReqRunwayLg(REQ_RUNWAY_LG_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AirportPackage.FLIGHT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AirportPackage.FLIGHT__TIME:
        return time != null;
      case AirportPackage.FLIGHT__AIRPLANE_SIZE:
        return airplaneSize != AIRPLANE_SIZE_EDEFAULT;
      case AirportPackage.FLIGHT__REQ_RUNWAY_LG:
        return reqRunwayLg != REQ_RUNWAY_LG_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", airplaneSize: ");
    result.append(airplaneSize);
    result.append(", reqRunwayLg: ");
    result.append(reqRunwayLg);
    result.append(')');
    return result.toString();
  }

} //FlightImpl
