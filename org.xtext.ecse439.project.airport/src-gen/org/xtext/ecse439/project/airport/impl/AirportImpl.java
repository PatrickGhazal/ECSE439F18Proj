/**
 * generated by Xtext 2.10.0
 */
package org.xtext.ecse439.project.airport.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.ecse439.project.airport.Airport;
import org.xtext.ecse439.project.airport.AirportPackage;
import org.xtext.ecse439.project.airport.AllAirlines;
import org.xtext.ecse439.project.airport.AllFlights;
import org.xtext.ecse439.project.airport.AllGates;
import org.xtext.ecse439.project.airport.AllRunways;
import org.xtext.ecse439.project.airport.AllTerminals;
import org.xtext.ecse439.project.airport.Schedule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Airport</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.AirportImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.AirportImpl#getSchedule <em>Schedule</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.AirportImpl#getAllRun <em>All Run</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.AirportImpl#getAllGat <em>All Gat</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.AirportImpl#getAllAir <em>All Air</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.AirportImpl#getAllFli <em>All Fli</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.AirportImpl#getAllTer <em>All Ter</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AirportImpl extends MinimalEObjectImpl.Container implements Airport
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSchedule() <em>Schedule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchedule()
   * @generated
   * @ordered
   */
  protected Schedule schedule;

  /**
   * The cached value of the '{@link #getAllRun() <em>All Run</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllRun()
   * @generated
   * @ordered
   */
  protected AllRunways allRun;

  /**
   * The cached value of the '{@link #getAllGat() <em>All Gat</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllGat()
   * @generated
   * @ordered
   */
  protected AllGates allGat;

  /**
   * The cached value of the '{@link #getAllAir() <em>All Air</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllAir()
   * @generated
   * @ordered
   */
  protected AllAirlines allAir;

  /**
   * The cached value of the '{@link #getAllFli() <em>All Fli</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllFli()
   * @generated
   * @ordered
   */
  protected AllFlights allFli;

  /**
   * The cached value of the '{@link #getAllTer() <em>All Ter</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllTer()
   * @generated
   * @ordered
   */
  protected AllTerminals allTer;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AirportImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AirportPackage.Literals.AIRPORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Schedule getSchedule()
  {
    return schedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSchedule(Schedule newSchedule, NotificationChain msgs)
  {
    Schedule oldSchedule = schedule;
    schedule = newSchedule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__SCHEDULE, oldSchedule, newSchedule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSchedule(Schedule newSchedule)
  {
    if (newSchedule != schedule)
    {
      NotificationChain msgs = null;
      if (schedule != null)
        msgs = ((InternalEObject)schedule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__SCHEDULE, null, msgs);
      if (newSchedule != null)
        msgs = ((InternalEObject)newSchedule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__SCHEDULE, null, msgs);
      msgs = basicSetSchedule(newSchedule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__SCHEDULE, newSchedule, newSchedule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllRunways getAllRun()
  {
    return allRun;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAllRun(AllRunways newAllRun, NotificationChain msgs)
  {
    AllRunways oldAllRun = allRun;
    allRun = newAllRun;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_RUN, oldAllRun, newAllRun);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllRun(AllRunways newAllRun)
  {
    if (newAllRun != allRun)
    {
      NotificationChain msgs = null;
      if (allRun != null)
        msgs = ((InternalEObject)allRun).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_RUN, null, msgs);
      if (newAllRun != null)
        msgs = ((InternalEObject)newAllRun).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_RUN, null, msgs);
      msgs = basicSetAllRun(newAllRun, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_RUN, newAllRun, newAllRun));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllGates getAllGat()
  {
    return allGat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAllGat(AllGates newAllGat, NotificationChain msgs)
  {
    AllGates oldAllGat = allGat;
    allGat = newAllGat;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_GAT, oldAllGat, newAllGat);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllGat(AllGates newAllGat)
  {
    if (newAllGat != allGat)
    {
      NotificationChain msgs = null;
      if (allGat != null)
        msgs = ((InternalEObject)allGat).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_GAT, null, msgs);
      if (newAllGat != null)
        msgs = ((InternalEObject)newAllGat).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_GAT, null, msgs);
      msgs = basicSetAllGat(newAllGat, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_GAT, newAllGat, newAllGat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllAirlines getAllAir()
  {
    return allAir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAllAir(AllAirlines newAllAir, NotificationChain msgs)
  {
    AllAirlines oldAllAir = allAir;
    allAir = newAllAir;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_AIR, oldAllAir, newAllAir);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllAir(AllAirlines newAllAir)
  {
    if (newAllAir != allAir)
    {
      NotificationChain msgs = null;
      if (allAir != null)
        msgs = ((InternalEObject)allAir).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_AIR, null, msgs);
      if (newAllAir != null)
        msgs = ((InternalEObject)newAllAir).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_AIR, null, msgs);
      msgs = basicSetAllAir(newAllAir, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_AIR, newAllAir, newAllAir));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllFlights getAllFli()
  {
    return allFli;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAllFli(AllFlights newAllFli, NotificationChain msgs)
  {
    AllFlights oldAllFli = allFli;
    allFli = newAllFli;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_FLI, oldAllFli, newAllFli);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllFli(AllFlights newAllFli)
  {
    if (newAllFli != allFli)
    {
      NotificationChain msgs = null;
      if (allFli != null)
        msgs = ((InternalEObject)allFli).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_FLI, null, msgs);
      if (newAllFli != null)
        msgs = ((InternalEObject)newAllFli).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_FLI, null, msgs);
      msgs = basicSetAllFli(newAllFli, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_FLI, newAllFli, newAllFli));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllTerminals getAllTer()
  {
    return allTer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAllTer(AllTerminals newAllTer, NotificationChain msgs)
  {
    AllTerminals oldAllTer = allTer;
    allTer = newAllTer;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_TER, oldAllTer, newAllTer);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllTer(AllTerminals newAllTer)
  {
    if (newAllTer != allTer)
    {
      NotificationChain msgs = null;
      if (allTer != null)
        msgs = ((InternalEObject)allTer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_TER, null, msgs);
      if (newAllTer != null)
        msgs = ((InternalEObject)newAllTer).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirportPackage.AIRPORT__ALL_TER, null, msgs);
      msgs = basicSetAllTer(newAllTer, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.AIRPORT__ALL_TER, newAllTer, newAllTer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AirportPackage.AIRPORT__SCHEDULE:
        return basicSetSchedule(null, msgs);
      case AirportPackage.AIRPORT__ALL_RUN:
        return basicSetAllRun(null, msgs);
      case AirportPackage.AIRPORT__ALL_GAT:
        return basicSetAllGat(null, msgs);
      case AirportPackage.AIRPORT__ALL_AIR:
        return basicSetAllAir(null, msgs);
      case AirportPackage.AIRPORT__ALL_FLI:
        return basicSetAllFli(null, msgs);
      case AirportPackage.AIRPORT__ALL_TER:
        return basicSetAllTer(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AirportPackage.AIRPORT__NAME:
        return getName();
      case AirportPackage.AIRPORT__SCHEDULE:
        return getSchedule();
      case AirportPackage.AIRPORT__ALL_RUN:
        return getAllRun();
      case AirportPackage.AIRPORT__ALL_GAT:
        return getAllGat();
      case AirportPackage.AIRPORT__ALL_AIR:
        return getAllAir();
      case AirportPackage.AIRPORT__ALL_FLI:
        return getAllFli();
      case AirportPackage.AIRPORT__ALL_TER:
        return getAllTer();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AirportPackage.AIRPORT__NAME:
        setName((String)newValue);
        return;
      case AirportPackage.AIRPORT__SCHEDULE:
        setSchedule((Schedule)newValue);
        return;
      case AirportPackage.AIRPORT__ALL_RUN:
        setAllRun((AllRunways)newValue);
        return;
      case AirportPackage.AIRPORT__ALL_GAT:
        setAllGat((AllGates)newValue);
        return;
      case AirportPackage.AIRPORT__ALL_AIR:
        setAllAir((AllAirlines)newValue);
        return;
      case AirportPackage.AIRPORT__ALL_FLI:
        setAllFli((AllFlights)newValue);
        return;
      case AirportPackage.AIRPORT__ALL_TER:
        setAllTer((AllTerminals)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AirportPackage.AIRPORT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AirportPackage.AIRPORT__SCHEDULE:
        setSchedule((Schedule)null);
        return;
      case AirportPackage.AIRPORT__ALL_RUN:
        setAllRun((AllRunways)null);
        return;
      case AirportPackage.AIRPORT__ALL_GAT:
        setAllGat((AllGates)null);
        return;
      case AirportPackage.AIRPORT__ALL_AIR:
        setAllAir((AllAirlines)null);
        return;
      case AirportPackage.AIRPORT__ALL_FLI:
        setAllFli((AllFlights)null);
        return;
      case AirportPackage.AIRPORT__ALL_TER:
        setAllTer((AllTerminals)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AirportPackage.AIRPORT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AirportPackage.AIRPORT__SCHEDULE:
        return schedule != null;
      case AirportPackage.AIRPORT__ALL_RUN:
        return allRun != null;
      case AirportPackage.AIRPORT__ALL_GAT:
        return allGat != null;
      case AirportPackage.AIRPORT__ALL_AIR:
        return allAir != null;
      case AirportPackage.AIRPORT__ALL_FLI:
        return allFli != null;
      case AirportPackage.AIRPORT__ALL_TER:
        return allTer != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AirportImpl
