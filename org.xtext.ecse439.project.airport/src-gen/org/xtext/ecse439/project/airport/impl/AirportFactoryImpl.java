/**
 * generated by Xtext 2.10.0
 */
package org.xtext.ecse439.project.airport.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.ecse439.project.airport.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AirportFactoryImpl extends EFactoryImpl implements AirportFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AirportFactory init()
  {
    try
    {
      AirportFactory theAirportFactory = (AirportFactory)EPackage.Registry.INSTANCE.getEFactory(AirportPackage.eNS_URI);
      if (theAirportFactory != null)
      {
        return theAirportFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AirportFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AirportFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AirportPackage.DOMAINMODEL: return createDomainmodel();
      case AirportPackage.AIRPORT: return createAirport();
      case AirportPackage.ALL_TERMINALS: return createAllTerminals();
      case AirportPackage.ALL_RUNWAYS: return createAllRunways();
      case AirportPackage.ALL_GATES: return createAllGates();
      case AirportPackage.ALL_AIRLINES: return createAllAirlines();
      case AirportPackage.ALL_FLIGHTS: return createAllFlights();
      case AirportPackage.SCHEDULE: return createSchedule();
      case AirportPackage.FLIGHT: return createFlight();
      case AirportPackage.FL_GATE: return createFlGate();
      case AirportPackage.TERMINAL: return createTerminal();
      case AirportPackage.RUNWAY: return createRunway();
      case AirportPackage.GATE: return createGate();
      case AirportPackage.AIRLINE: return createAirline();
      case AirportPackage.DATE: return createDate();
      case AirportPackage.TIME: return createTime();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domainmodel createDomainmodel()
  {
    DomainmodelImpl domainmodel = new DomainmodelImpl();
    return domainmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Airport createAirport()
  {
    AirportImpl airport = new AirportImpl();
    return airport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllTerminals createAllTerminals()
  {
    AllTerminalsImpl allTerminals = new AllTerminalsImpl();
    return allTerminals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllRunways createAllRunways()
  {
    AllRunwaysImpl allRunways = new AllRunwaysImpl();
    return allRunways;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllGates createAllGates()
  {
    AllGatesImpl allGates = new AllGatesImpl();
    return allGates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllAirlines createAllAirlines()
  {
    AllAirlinesImpl allAirlines = new AllAirlinesImpl();
    return allAirlines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllFlights createAllFlights()
  {
    AllFlightsImpl allFlights = new AllFlightsImpl();
    return allFlights;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Schedule createSchedule()
  {
    ScheduleImpl schedule = new ScheduleImpl();
    return schedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Flight createFlight()
  {
    FlightImpl flight = new FlightImpl();
    return flight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FlGate createFlGate()
  {
    FlGateImpl flGate = new FlGateImpl();
    return flGate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Terminal createTerminal()
  {
    TerminalImpl terminal = new TerminalImpl();
    return terminal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Runway createRunway()
  {
    RunwayImpl runway = new RunwayImpl();
    return runway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gate createGate()
  {
    GateImpl gate = new GateImpl();
    return gate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Airline createAirline()
  {
    AirlineImpl airline = new AirlineImpl();
    return airline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Date createDate()
  {
    DateImpl date = new DateImpl();
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AirportPackage getAirportPackage()
  {
    return (AirportPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AirportPackage getPackage()
  {
    return AirportPackage.eINSTANCE;
  }

} //AirportFactoryImpl
