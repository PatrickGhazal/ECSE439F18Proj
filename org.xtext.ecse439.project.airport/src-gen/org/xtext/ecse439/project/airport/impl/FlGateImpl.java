/**
 * generated by Xtext 2.10.0
 */
package org.xtext.ecse439.project.airport.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.ecse439.project.airport.AirportPackage;
import org.xtext.ecse439.project.airport.FlGate;
import org.xtext.ecse439.project.airport.Flight;
import org.xtext.ecse439.project.airport.Gate;
import org.xtext.ecse439.project.airport.Time;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fl Gate</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.FlGateImpl#getFlight <em>Flight</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.FlGateImpl#getGate <em>Gate</em>}</li>
 *   <li>{@link org.xtext.ecse439.project.airport.impl.FlGateImpl#getTime <em>Time</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FlGateImpl extends MinimalEObjectImpl.Container implements FlGate
{
  /**
   * The cached value of the '{@link #getFlight() <em>Flight</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlight()
   * @generated
   * @ordered
   */
  protected Flight flight;

  /**
   * The cached value of the '{@link #getGate() <em>Gate</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGate()
   * @generated
   * @ordered
   */
  protected Gate gate;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected Time time;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FlGateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AirportPackage.Literals.FL_GATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Flight getFlight()
  {
    if (flight != null && flight.eIsProxy())
    {
      InternalEObject oldFlight = (InternalEObject)flight;
      flight = (Flight)eResolveProxy(oldFlight);
      if (flight != oldFlight)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirportPackage.FL_GATE__FLIGHT, oldFlight, flight));
      }
    }
    return flight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Flight basicGetFlight()
  {
    return flight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFlight(Flight newFlight)
  {
    Flight oldFlight = flight;
    flight = newFlight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.FL_GATE__FLIGHT, oldFlight, flight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gate getGate()
  {
    if (gate != null && gate.eIsProxy())
    {
      InternalEObject oldGate = (InternalEObject)gate;
      gate = (Gate)eResolveProxy(oldGate);
      if (gate != oldGate)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AirportPackage.FL_GATE__GATE, oldGate, gate));
      }
    }
    return gate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gate basicGetGate()
  {
    return gate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGate(Gate newGate)
  {
    Gate oldGate = gate;
    gate = newGate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.FL_GATE__GATE, oldGate, gate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Time getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTime(Time newTime, NotificationChain msgs)
  {
    Time oldTime = time;
    time = newTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirportPackage.FL_GATE__TIME, oldTime, newTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTime(Time newTime)
  {
    if (newTime != time)
    {
      NotificationChain msgs = null;
      if (time != null)
        msgs = ((InternalEObject)time).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirportPackage.FL_GATE__TIME, null, msgs);
      if (newTime != null)
        msgs = ((InternalEObject)newTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirportPackage.FL_GATE__TIME, null, msgs);
      msgs = basicSetTime(newTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirportPackage.FL_GATE__TIME, newTime, newTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AirportPackage.FL_GATE__TIME:
        return basicSetTime(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AirportPackage.FL_GATE__FLIGHT:
        if (resolve) return getFlight();
        return basicGetFlight();
      case AirportPackage.FL_GATE__GATE:
        if (resolve) return getGate();
        return basicGetGate();
      case AirportPackage.FL_GATE__TIME:
        return getTime();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AirportPackage.FL_GATE__FLIGHT:
        setFlight((Flight)newValue);
        return;
      case AirportPackage.FL_GATE__GATE:
        setGate((Gate)newValue);
        return;
      case AirportPackage.FL_GATE__TIME:
        setTime((Time)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AirportPackage.FL_GATE__FLIGHT:
        setFlight((Flight)null);
        return;
      case AirportPackage.FL_GATE__GATE:
        setGate((Gate)null);
        return;
      case AirportPackage.FL_GATE__TIME:
        setTime((Time)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AirportPackage.FL_GATE__FLIGHT:
        return flight != null;
      case AirportPackage.FL_GATE__GATE:
        return gate != null;
      case AirportPackage.FL_GATE__TIME:
        return time != null;
    }
    return super.eIsSet(featureID);
  }

} //FlGateImpl
