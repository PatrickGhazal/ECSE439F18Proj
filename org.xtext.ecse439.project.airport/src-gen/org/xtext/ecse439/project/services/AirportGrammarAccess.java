/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ecse439.project.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AirportGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAirportParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=Airport;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Airport
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Airport
		public RuleCall getElementsAirportParserRuleCall_0() { return cElementsAirportParserRuleCall_0; }
	}
	public class AirportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Airport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScheduleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScheduleScheduleParserRuleCall_3_0 = (RuleCall)cScheduleAssignment_3.eContents().get(0);
		private final Assignment cAllRunAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAllRunAllRunwaysParserRuleCall_4_0 = (RuleCall)cAllRunAssignment_4.eContents().get(0);
		private final Assignment cAllGatAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAllGatAllGatesParserRuleCall_5_0 = (RuleCall)cAllGatAssignment_5.eContents().get(0);
		private final Assignment cAllAirAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAllAirAllAirlinesParserRuleCall_6_0 = (RuleCall)cAllAirAssignment_6.eContents().get(0);
		private final Assignment cAllFliAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAllFliAllFlightsParserRuleCall_7_0 = (RuleCall)cAllFliAssignment_7.eContents().get(0);
		private final Assignment cAllTerAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAllTerAllTerminalsParserRuleCall_8_0 = (RuleCall)cAllTerAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Airport:
		//	'Airport' name=ID '{'
		//	schedule=Schedule
		//	allRun=AllRunways
		//	allGat=AllGates
		//	allAir=AllAirlines
		//	allFli=AllFlights
		//	allTer=AllTerminals
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Airport' name=ID '{' schedule=Schedule allRun=AllRunways allGat=AllGates allAir=AllAirlines allFli=AllFlights
		//allTer=AllTerminals '}'
		public Group getGroup() { return cGroup; }
		
		//'Airport'
		public Keyword getAirportKeyword_0() { return cAirportKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//schedule=Schedule
		public Assignment getScheduleAssignment_3() { return cScheduleAssignment_3; }
		
		//Schedule
		public RuleCall getScheduleScheduleParserRuleCall_3_0() { return cScheduleScheduleParserRuleCall_3_0; }
		
		//allRun=AllRunways
		public Assignment getAllRunAssignment_4() { return cAllRunAssignment_4; }
		
		//AllRunways
		public RuleCall getAllRunAllRunwaysParserRuleCall_4_0() { return cAllRunAllRunwaysParserRuleCall_4_0; }
		
		//allGat=AllGates
		public Assignment getAllGatAssignment_5() { return cAllGatAssignment_5; }
		
		//AllGates
		public RuleCall getAllGatAllGatesParserRuleCall_5_0() { return cAllGatAllGatesParserRuleCall_5_0; }
		
		//allAir=AllAirlines
		public Assignment getAllAirAssignment_6() { return cAllAirAssignment_6; }
		
		//AllAirlines
		public RuleCall getAllAirAllAirlinesParserRuleCall_6_0() { return cAllAirAllAirlinesParserRuleCall_6_0; }
		
		//allFli=AllFlights
		public Assignment getAllFliAssignment_7() { return cAllFliAssignment_7; }
		
		//AllFlights
		public RuleCall getAllFliAllFlightsParserRuleCall_7_0() { return cAllFliAllFlightsParserRuleCall_7_0; }
		
		//allTer=AllTerminals
		public Assignment getAllTerAssignment_8() { return cAllTerAssignment_8; }
		
		//AllTerminals
		public RuleCall getAllTerAllTerminalsParserRuleCall_8_0() { return cAllTerAllTerminalsParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class AllTerminalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.AllTerminals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminalsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTerminalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTerminalsTerminalParserRuleCall_2_0 = (RuleCall)cTerminalsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AllTerminals:
		//	'Terminals' '{'
		//	terminals+=Terminal+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Terminals' '{' terminals+=Terminal+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Terminals'
		public Keyword getTerminalsKeyword_0() { return cTerminalsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//terminals+=Terminal+
		public Assignment getTerminalsAssignment_2() { return cTerminalsAssignment_2; }
		
		//Terminal
		public RuleCall getTerminalsTerminalParserRuleCall_2_0() { return cTerminalsTerminalParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AllRunwaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.AllRunways");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunwaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRunwaysAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRunwaysRunwayParserRuleCall_2_0 = (RuleCall)cRunwaysAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AllRunways:
		//	'Runways' '{'
		//	runways+=Runway+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Runways' '{' runways+=Runway+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Runways'
		public Keyword getRunwaysKeyword_0() { return cRunwaysKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//runways+=Runway+
		public Assignment getRunwaysAssignment_2() { return cRunwaysAssignment_2; }
		
		//Runway
		public RuleCall getRunwaysRunwayParserRuleCall_2_0() { return cRunwaysRunwayParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AllGatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.AllGates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGatesGateParserRuleCall_2_0 = (RuleCall)cGatesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AllGates:
		//	'Gates' '{'
		//	gates+=Gate+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Gates' '{' gates+=Gate+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Gates'
		public Keyword getGatesKeyword_0() { return cGatesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//gates+=Gate+
		public Assignment getGatesAssignment_2() { return cGatesAssignment_2; }
		
		//Gate
		public RuleCall getGatesGateParserRuleCall_2_0() { return cGatesGateParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AllAirlinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.AllAirlines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAirlinesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAirlineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAirlineAirlineParserRuleCall_2_0 = (RuleCall)cAirlineAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AllAirlines:
		//	'Airlines' '{'
		//	airline+=Airline+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Airlines' '{' airline+=Airline+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Airlines'
		public Keyword getAirlinesKeyword_0() { return cAirlinesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//airline+=Airline+
		public Assignment getAirlineAssignment_2() { return cAirlineAssignment_2; }
		
		//Airline
		public RuleCall getAirlineAirlineParserRuleCall_2_0() { return cAirlineAirlineParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AllFlightsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.AllFlights");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFlightsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFlightsFlightParserRuleCall_2_0 = (RuleCall)cFlightsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AllFlights:
		//	'Flights' '{'
		//	flights+=Flight+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Flights' '{' flights+=Flight+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Flights'
		public Keyword getFlightsKeyword_0() { return cFlightsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//flights+=Flight+
		public Assignment getFlightsAssignment_2() { return cFlightsAssignment_2; }
		
		//Flight
		public RuleCall getFlightsFlightParserRuleCall_2_0() { return cFlightsFlightParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScheduleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScheduleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDateDateParserRuleCall_3_0 = (RuleCall)cDateAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFlGateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFlGateFlGateParserRuleCall_5_0 = (RuleCall)cFlGateAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Schedule:
		//	{Schedule} 'Schedule' 'for' date=Date '{' flGate+=FlGate* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Schedule} 'Schedule' 'for' date=Date '{' flGate+=FlGate* '}'
		public Group getGroup() { return cGroup; }
		
		//{Schedule}
		public Action getScheduleAction_0() { return cScheduleAction_0; }
		
		//'Schedule'
		public Keyword getScheduleKeyword_1() { return cScheduleKeyword_1; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//date=Date
		public Assignment getDateAssignment_3() { return cDateAssignment_3; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_3_0() { return cDateDateParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//flGate+=FlGate*
		public Assignment getFlGateAssignment_5() { return cFlGateAssignment_5; }
		
		//FlGate
		public RuleCall getFlGateFlGateParserRuleCall_5_0() { return cFlGateFlGateParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FlightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Flight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeTimeParserRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPlaneKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSizeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAirplaneSizeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAirplaneSizeINTTerminalRuleCall_7_0 = (RuleCall)cAirplaneSizeAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cNeededKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRunwayKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLengthKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cColonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cReqRunwayLgAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cReqRunwayLgINTTerminalRuleCall_13_0 = (RuleCall)cReqRunwayLgAssignment_13.eContents().get(0);
		
		//Flight:
		//	name=ID ',' time=Time ',' 'Plane' 'size' ':' airplaneSize=INT ',' 'Needed' 'runway' 'length' ':' reqRunwayLg=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ',' time=Time ',' 'Plane' 'size' ':' airplaneSize=INT ',' 'Needed' 'runway' 'length' ':' reqRunwayLg=INT
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//time=Time
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_2_0() { return cTimeTimeParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//'Plane'
		public Keyword getPlaneKeyword_4() { return cPlaneKeyword_4; }
		
		//'size'
		public Keyword getSizeKeyword_5() { return cSizeKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//airplaneSize=INT
		public Assignment getAirplaneSizeAssignment_7() { return cAirplaneSizeAssignment_7; }
		
		//INT
		public RuleCall getAirplaneSizeINTTerminalRuleCall_7_0() { return cAirplaneSizeINTTerminalRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//'Needed'
		public Keyword getNeededKeyword_9() { return cNeededKeyword_9; }
		
		//'runway'
		public Keyword getRunwayKeyword_10() { return cRunwayKeyword_10; }
		
		//'length'
		public Keyword getLengthKeyword_11() { return cLengthKeyword_11; }
		
		//':'
		public Keyword getColonKeyword_12() { return cColonKeyword_12; }
		
		//reqRunwayLg=INT
		public Assignment getReqRunwayLgAssignment_13() { return cReqRunwayLgAssignment_13; }
		
		//INT
		public RuleCall getReqRunwayLgINTTerminalRuleCall_13_0() { return cReqRunwayLgINTTerminalRuleCall_13_0; }
	}
	public class FlGateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.FlGate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFlightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFlightFlightCrossReference_1_0 = (CrossReference)cFlightAssignment_1.eContents().get(0);
		private final RuleCall cFlightFlightIDTerminalRuleCall_1_0_1 = (RuleCall)cFlightFlightCrossReference_1_0.eContents().get(1);
		private final RuleCall cGATE_MESSAGETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cGateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cGateGateCrossReference_3_0 = (CrossReference)cGateAssignment_3.eContents().get(0);
		private final RuleCall cGateGateIDTerminalRuleCall_3_0_1 = (RuleCall)cGateGateCrossReference_3_0.eContents().get(1);
		private final Keyword cAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeTimeParserRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FlGate:
		//	'Flight' flight=[Flight] GATE_MESSAGE gate=[Gate] 'at' time=Time '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'Flight' flight=[Flight] GATE_MESSAGE gate=[Gate] 'at' time=Time '.'
		public Group getGroup() { return cGroup; }
		
		//'Flight'
		public Keyword getFlightKeyword_0() { return cFlightKeyword_0; }
		
		//flight=[Flight]
		public Assignment getFlightAssignment_1() { return cFlightAssignment_1; }
		
		//[Flight]
		public CrossReference getFlightFlightCrossReference_1_0() { return cFlightFlightCrossReference_1_0; }
		
		//ID
		public RuleCall getFlightFlightIDTerminalRuleCall_1_0_1() { return cFlightFlightIDTerminalRuleCall_1_0_1; }
		
		//GATE_MESSAGE
		public RuleCall getGATE_MESSAGETerminalRuleCall_2() { return cGATE_MESSAGETerminalRuleCall_2; }
		
		//gate=[Gate]
		public Assignment getGateAssignment_3() { return cGateAssignment_3; }
		
		//[Gate]
		public CrossReference getGateGateCrossReference_3_0() { return cGateGateCrossReference_3_0; }
		
		//ID
		public RuleCall getGateGateIDTerminalRuleCall_3_0_1() { return cGateGateIDTerminalRuleCall_3_0_1; }
		
		//'at'
		public Keyword getAtKeyword_4() { return cAtKeyword_4; }
		
		//time=Time
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_5_0() { return cTimeTimeParserRuleCall_5_0; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}
	public class TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Terminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTerminalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRunwayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRunwayRunwayCrossReference_3_0 = (CrossReference)cRunwayAssignment_3.eContents().get(0);
		private final RuleCall cRunwayRunwayIDTerminalRuleCall_3_0_1 = (RuleCall)cRunwayRunwayCrossReference_3_0.eContents().get(1);
		private final Assignment cGatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cGatesGateCrossReference_4_0 = (CrossReference)cGatesAssignment_4.eContents().get(0);
		private final RuleCall cGatesGateIDTerminalRuleCall_4_0_1 = (RuleCall)cGatesGateCrossReference_4_0.eContents().get(1);
		private final Assignment cAirlineAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAirlineAirlineCrossReference_5_0 = (CrossReference)cAirlineAssignment_5.eContents().get(0);
		private final RuleCall cAirlineAirlineIDTerminalRuleCall_5_0_1 = (RuleCall)cAirlineAirlineCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Terminal:
		//	{Terminal} name=ID '{'
		//	runway=[Runway] gates+=[Gate]*
		//	airline=[Airline]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Terminal} name=ID '{' runway=[Runway] gates+=[Gate]* airline=[Airline] '}'
		public Group getGroup() { return cGroup; }
		
		//{Terminal}
		public Action getTerminalAction_0() { return cTerminalAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//runway=[Runway]
		public Assignment getRunwayAssignment_3() { return cRunwayAssignment_3; }
		
		//[Runway]
		public CrossReference getRunwayRunwayCrossReference_3_0() { return cRunwayRunwayCrossReference_3_0; }
		
		//ID
		public RuleCall getRunwayRunwayIDTerminalRuleCall_3_0_1() { return cRunwayRunwayIDTerminalRuleCall_3_0_1; }
		
		//gates+=[Gate]*
		public Assignment getGatesAssignment_4() { return cGatesAssignment_4; }
		
		//[Gate]
		public CrossReference getGatesGateCrossReference_4_0() { return cGatesGateCrossReference_4_0; }
		
		//ID
		public RuleCall getGatesGateIDTerminalRuleCall_4_0_1() { return cGatesGateIDTerminalRuleCall_4_0_1; }
		
		//airline=[Airline]
		public Assignment getAirlineAssignment_5() { return cAirlineAssignment_5; }
		
		//[Airline]
		public CrossReference getAirlineAirlineCrossReference_5_0() { return cAirlineAirlineCrossReference_5_0; }
		
		//ID
		public RuleCall getAirlineAirlineIDTerminalRuleCall_5_0_1() { return cAirlineAirlineIDTerminalRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RunwayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Runway");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLengthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLengthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLengthINTTerminalRuleCall_4_0 = (RuleCall)cLengthAssignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cUseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cUsedAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUsedBooleanParserRuleCall_9_0 = (RuleCall)cUsedAssignment_9.eContents().get(0);
		
		//Runway:
		//	name=ID '.' 'Length' ':' length=INT '.' 'In' 'use' ':' used=Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '.' 'Length' ':' length=INT '.' 'In' 'use' ':' used=Boolean
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'Length'
		public Keyword getLengthKeyword_2() { return cLengthKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//length=INT
		public Assignment getLengthAssignment_4() { return cLengthAssignment_4; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_4_0() { return cLengthINTTerminalRuleCall_4_0; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//'In'
		public Keyword getInKeyword_6() { return cInKeyword_6; }
		
		//'use'
		public Keyword getUseKeyword_7() { return cUseKeyword_7; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//used=Boolean
		public Assignment getUsedAssignment_9() { return cUsedAssignment_9; }
		
		//Boolean
		public RuleCall getUsedBooleanParserRuleCall_9_0() { return cUsedBooleanParserRuleCall_9_0; }
	}
	public class GateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Gate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMaxKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAirplaneKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSizeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAllowedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMaxApSizeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaxApSizeINTTerminalRuleCall_7_0 = (RuleCall)cMaxApSizeAssignment_7.eContents().get(0);
		
		//Gate:
		//	name=ID '.' 'Max' 'airplane' 'size' 'allowed' ':' maxApSize=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '.' 'Max' 'airplane' 'size' 'allowed' ':' maxApSize=INT
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'Max'
		public Keyword getMaxKeyword_2() { return cMaxKeyword_2; }
		
		//'airplane'
		public Keyword getAirplaneKeyword_3() { return cAirplaneKeyword_3; }
		
		//'size'
		public Keyword getSizeKeyword_4() { return cSizeKeyword_4; }
		
		//'allowed'
		public Keyword getAllowedKeyword_5() { return cAllowedKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//maxApSize=INT
		public Assignment getMaxApSizeAssignment_7() { return cMaxApSizeAssignment_7; }
		
		//INT
		public RuleCall getMaxApSizeINTTerminalRuleCall_7_0() { return cMaxApSizeINTTerminalRuleCall_7_0; }
	}
	public class AirlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Airline");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Airline:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDayINTTerminalRuleCall_0_0 = (RuleCall)cDayAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMonthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMonthIDTerminalRuleCall_2_0 = (RuleCall)cMonthAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYearAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYearINTTerminalRuleCall_4_0 = (RuleCall)cYearAssignment_4.eContents().get(0);
		
		//Date:
		//	day=INT '-' month=ID '-' year=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//day=INT '-' month=ID '-' year=INT
		public Group getGroup() { return cGroup; }
		
		//day=INT
		public Assignment getDayAssignment_0() { return cDayAssignment_0; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_0_0() { return cDayINTTerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//month=ID
		public Assignment getMonthAssignment_2() { return cMonthAssignment_2; }
		
		//ID
		public RuleCall getMonthIDTerminalRuleCall_2_0() { return cMonthIDTerminalRuleCall_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//year=INT
		public Assignment getYearAssignment_4() { return cYearAssignment_4; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_4_0() { return cYearINTTerminalRuleCall_4_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHourAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHourINTTerminalRuleCall_0_0 = (RuleCall)cHourAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinuteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinuteINTTerminalRuleCall_2_0 = (RuleCall)cMinuteAssignment_2.eContents().get(0);
		
		//Time:
		//	hour=INT ':' minute=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//hour=INT ':' minute=INT
		public Group getGroup() { return cGroup; }
		
		//hour=INT
		public Assignment getHourAssignment_0() { return cHourAssignment_0; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_0_0() { return cHourINTTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//minute=INT
		public Assignment getMinuteAssignment_2() { return cMinuteAssignment_2; }
		
		//INT
		public RuleCall getMinuteINTTerminalRuleCall_2_0() { return cMinuteINTTerminalRuleCall_2_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final AirportElements pAirport;
	private final AllTerminalsElements pAllTerminals;
	private final AllRunwaysElements pAllRunways;
	private final AllGatesElements pAllGates;
	private final AllAirlinesElements pAllAirlines;
	private final AllFlightsElements pAllFlights;
	private final ScheduleElements pSchedule;
	private final FlightElements pFlight;
	private final FlGateElements pFlGate;
	private final TerminalRule tGATE_MESSAGE;
	private final TerminalElements pTerminal;
	private final RunwayElements pRunway;
	private final GateElements pGate;
	private final AirlineElements pAirline;
	private final DateElements pDate;
	private final TimeElements pTime;
	private final BooleanElements pBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AirportGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pAirport = new AirportElements();
		this.pAllTerminals = new AllTerminalsElements();
		this.pAllRunways = new AllRunwaysElements();
		this.pAllGates = new AllGatesElements();
		this.pAllAirlines = new AllAirlinesElements();
		this.pAllFlights = new AllFlightsElements();
		this.pSchedule = new ScheduleElements();
		this.pFlight = new FlightElements();
		this.pFlGate = new FlGateElements();
		this.tGATE_MESSAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ecse439.project.Airport.GATE_MESSAGE");
		this.pTerminal = new TerminalElements();
		this.pRunway = new RunwayElements();
		this.pGate = new GateElements();
		this.pAirline = new AirlineElements();
		this.pDate = new DateElements();
		this.pTime = new TimeElements();
		this.pBoolean = new BooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ecse439.project.Airport".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=Airport;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//Airport:
	//	'Airport' name=ID '{'
	//	schedule=Schedule
	//	allRun=AllRunways
	//	allGat=AllGates
	//	allAir=AllAirlines
	//	allFli=AllFlights
	//	allTer=AllTerminals
	//	'}';
	public AirportElements getAirportAccess() {
		return pAirport;
	}
	
	public ParserRule getAirportRule() {
		return getAirportAccess().getRule();
	}
	
	//AllTerminals:
	//	'Terminals' '{'
	//	terminals+=Terminal+
	//	'}';
	public AllTerminalsElements getAllTerminalsAccess() {
		return pAllTerminals;
	}
	
	public ParserRule getAllTerminalsRule() {
		return getAllTerminalsAccess().getRule();
	}
	
	//AllRunways:
	//	'Runways' '{'
	//	runways+=Runway+
	//	'}';
	public AllRunwaysElements getAllRunwaysAccess() {
		return pAllRunways;
	}
	
	public ParserRule getAllRunwaysRule() {
		return getAllRunwaysAccess().getRule();
	}
	
	//AllGates:
	//	'Gates' '{'
	//	gates+=Gate+
	//	'}';
	public AllGatesElements getAllGatesAccess() {
		return pAllGates;
	}
	
	public ParserRule getAllGatesRule() {
		return getAllGatesAccess().getRule();
	}
	
	//AllAirlines:
	//	'Airlines' '{'
	//	airline+=Airline+
	//	'}';
	public AllAirlinesElements getAllAirlinesAccess() {
		return pAllAirlines;
	}
	
	public ParserRule getAllAirlinesRule() {
		return getAllAirlinesAccess().getRule();
	}
	
	//AllFlights:
	//	'Flights' '{'
	//	flights+=Flight+
	//	'}';
	public AllFlightsElements getAllFlightsAccess() {
		return pAllFlights;
	}
	
	public ParserRule getAllFlightsRule() {
		return getAllFlightsAccess().getRule();
	}
	
	//Schedule:
	//	{Schedule} 'Schedule' 'for' date=Date '{' flGate+=FlGate* '}';
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}
	
	//Flight:
	//	name=ID ',' time=Time ',' 'Plane' 'size' ':' airplaneSize=INT ',' 'Needed' 'runway' 'length' ':' reqRunwayLg=INT;
	public FlightElements getFlightAccess() {
		return pFlight;
	}
	
	public ParserRule getFlightRule() {
		return getFlightAccess().getRule();
	}
	
	//FlGate:
	//	'Flight' flight=[Flight] GATE_MESSAGE gate=[Gate] 'at' time=Time '.';
	public FlGateElements getFlGateAccess() {
		return pFlGate;
	}
	
	public ParserRule getFlGateRule() {
		return getFlGateAccess().getRule();
	}
	
	//terminal GATE_MESSAGE:
	//	" is arriving at " | " is departing from ";
	public TerminalRule getGATE_MESSAGERule() {
		return tGATE_MESSAGE;
	}
	
	//Terminal:
	//	{Terminal} name=ID '{'
	//	runway=[Runway] gates+=[Gate]*
	//	airline=[Airline]
	//	'}';
	public TerminalElements getTerminalAccess() {
		return pTerminal;
	}
	
	public ParserRule getTerminalRule() {
		return getTerminalAccess().getRule();
	}
	
	//Runway:
	//	name=ID '.' 'Length' ':' length=INT '.' 'In' 'use' ':' used=Boolean;
	public RunwayElements getRunwayAccess() {
		return pRunway;
	}
	
	public ParserRule getRunwayRule() {
		return getRunwayAccess().getRule();
	}
	
	//Gate:
	//	name=ID '.' 'Max' 'airplane' 'size' 'allowed' ':' maxApSize=INT;
	public GateElements getGateAccess() {
		return pGate;
	}
	
	public ParserRule getGateRule() {
		return getGateAccess().getRule();
	}
	
	//Airline:
	//	name=ID;
	public AirlineElements getAirlineAccess() {
		return pAirline;
	}
	
	public ParserRule getAirlineRule() {
		return getAirlineAccess().getRule();
	}
	
	//Date:
	//	day=INT '-' month=ID '-' year=INT;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Time:
	//	hour=INT ':' minute=INT;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//Boolean:
	//	'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
